/* eslint camelcase: ["off"] */
'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const Schedule = require('../shared/schedule');

var _require = require('../utils');

const createScheduleRule = _require.createScheduleRule;

/**
 * PlugSchedule
 */

class PlugSchedule extends Schedule {
  /**
   * Adds Schedule rule.
   *
   * Sends `schedule.add_rule` command and returns rule id.
   * @param  {Object}        options
   * @param  {boolean}       options.powerState
   * @param  {(Date|number)} options.start  Date or number of minutes
   * @param  {number[]}     [options.daysOfWeek]  [0,6] = weekend, [1,2,3,4,5] = weekdays
   * @param  {string}       [options.name]
   * @param  {boolean}      [options.enable=true]
   * @param  {SendOptions}  [sendOptions]
   * @return {Promise<Object, ResponseError>} parsed JSON response
   */
  addRule({ powerState, start, daysOfWeek, name = '', enable = true }, sendOptions) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const rule = Object.assign({
        sact: powerState ? 1 : 0,
        name,
        enable: enable ? 1 : 0,
        emin: 0,
        etime_opt: -1
      }, createScheduleRule({ start, daysOfWeek }));

      return Schedule.prototype.addRule.call(_this, rule, sendOptions); // super.addRule(rule); // workaround babel bug
    })();
  }
  /**
   * Edits Schedule rule.
   *
   * Sends `schedule.edit_rule` command and returns rule id.
   * @param  {Object}        options
   * @param  {string}        options.id
   * @param  {boolean}       options.powerState
   * @param  {(Date|number)} options.start  Date or number of minutes
   * @param  {number[]}     [options.daysOfWeek]  [0,6] = weekend, [1,2,3,4,5] = weekdays
   * @param  {string}       [options.name]    [description]
   * @param  {boolean}      [options.enable=true]
   * @param  {SendOptions}  [sendOptions]
   * @return {Promise<Object, ResponseError>} parsed JSON response
   */
  editRule({ id, powerState, start, daysOfWeek, name = '', enable = true }, sendOptions) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const rule = Object.assign({
        id,
        sact: powerState ? 1 : 0,
        name,
        enable: enable ? 1 : 0,
        emin: 0,
        etime_opt: -1
      }, createScheduleRule({ start, daysOfWeek }));

      return Schedule.prototype.editRule.call(_this2, rule, sendOptions); // super.editRule(rule); // workaround babel bug
    })();
  }
}

module.exports = PlugSchedule;